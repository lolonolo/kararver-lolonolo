document.addEventListener('DOMContentLoaded', () => {
    // --- ELEMENTLER VE DEÄžÄ°ÅžKENLER (AynÄ±) ---
    const profileScreen = document.getElementById('profile-selection-screen');
    const quizScreen = document.getElementById('quiz-screen');
    const startQuizBtn = document.getElementById('start-quiz-btn');
    const questionTextEl = document.getElementById('question-text');
    const optionsContainerEl = document.getElementById('options-container');
    const nextBtn = document.getElementById('next-btn');
    const infoBoxEl = document.getElementById('info-box');
    const progressBar = document.getElementById('progress-bar');
    const questionContainer = document.getElementById('question-container');
    const resultContainer = document.getElementById('result-container');
    let userProfile = 'lise';
    let professions = [];
    let quizFlow = {};
    let currentQuestionNode = {};
    let userAnswers = {};
    const quizData = { /* ... (AynÄ±) ... */ };

    // --- ANA FONKSÄ°YONLAR ---
    
    // YENÄ°: displayResults fonksiyonu tamamen deÄŸiÅŸti
    function displayResults(results) {
        questionContainer.style.display = 'none';
        nextBtn.style.display = 'none';
        
        let resultsHTML = '<h3>VerdiÄŸin cevaplara gÃ¶re sana en uygun 3 meslek:</h3>';
        
        results.forEach(result => {
            // Uyum puanÄ±nÄ± hesaplayalÄ±m (basit bir yÃ¼zde olarak)
            const matchScore = (result.score / Object.keys(userAnswers).length * 100).toFixed(0);

            // Neden Ã¶nerildiÄŸini gÃ¶steren etiketleri bulalÄ±m
            let tagsHTML = '';
            for (const key in userAnswers) {
                if (result[key] === userAnswers[key]) {
                    // Cevap metnini bulmak iÃ§in soruyu ve seÃ§eneÄŸi bul
                    const question = quizFlow.find(q => q.key === key);
                    const option = question.options.find(o => o.value === userAnswers[key]);
                    if(option) {
                        tagsHTML += `<span class="tag">${option.text.split('(')[0].trim()}</span>`;
                    }
                }
            }

            resultsHTML += `
                <div class="result-card">
                    <h4>${result.name}</h4>
                    <div class="match-score">Sana Uyum PuanÄ±: %${matchScore} ðŸŸ¢</div>
                    <p class="description">${result.description || 'Bu meslek hakkÄ±nda yakÄ±nda daha fazla bilgi eklenecek.'}</p>
                    <div class="tags-title">Neden Sana Uygun?</div>
                    <div class="tags">${tagsHTML}</div>
                    <button class="primary-btn details-btn">Bu MesleÄŸi DetaylÄ± Ä°ncele â†’</button>
                </div>
            `;
        });

        resultsHTML += '<button id="restart-btn" class="secondary-btn">â€¹ Ankete BaÅŸa DÃ¶n</button>';
        
        resultContainer.innerHTML = resultsHTML;
        resultContainer.style.display = 'block';
        progressBar.style.width = `100%`;

        document.getElementById('restart-btn').addEventListener('click', () => {
            quizScreen.style.display = 'none';
            profileScreen.style.display = 'block';
        });
    }

    // --- GERÄ° KALAN TÃœM KODLAR ---
    // (AÅŸaÄŸÄ±daki tam sÃ¼rÃ¼mde hepsi mevcut)
});

// KARIÅžIKLIÄžI Ã–NLEMEK Ä°Ã‡Ä°N TAM DOSYAYI BURAYA YAPIÅžTIRIYORUM
document.addEventListener('DOMContentLoaded', () => {
    const profileScreen = document.getElementById('profile-selection-screen');
    const quizScreen = document.getElementById('quiz-screen');
    const startQuizBtn = document.getElementById('start-quiz-btn');
    const questionTextEl = document.getElementById('question-text');
    const optionsContainerEl = document.getElementById('options-container');
    const nextBtn = document.getElementById('next-btn');
    const infoBoxEl = document.getElementById('info-box');
    const progressBar = document.getElementById('progress-bar');
    const questionContainer = document.getElementById('question-container');
    const resultContainer = document.getElementById('result-container');
    let userProfile = 'lise';
    let professions = [];
    let quizFlow = {};
    let currentQuestionNode = {};
    let userAnswers = {};

    const quizData = {
        lise: [
            { id: 'start', question: "NasÄ±l bir Ã¼niversite hayatÄ± hedefliyorsun?", key: "egitim-turu", info: "ðŸ’¡ SeÃ§imin, sana Ã¶nereceÄŸimiz mesleklerin eÄŸitim tÃ¼rÃ¼nÃ¼ etkileyecek.", options: [ { text: "KampÃ¼se gidip derslere katÄ±lmak (Ã–rgÃ¼n EÄŸitim)", value: "orgun" }, { text: "Kendi zamanÄ±mÄ± yÃ¶neterek, evden okumak (AÃ§Ä±kÃ¶ÄŸretim)", value: "acikogretim" } ], next: () => 'holland_test_1' },
            { id: 'holland_test_1', question: "Hangisi sana daha Ã§ekici geliyor?", key: "holland_1", info: "ðŸ’¡ Bu test, ilgi alanlarÄ±nÄ± ve kiÅŸilik tipini anlamamÄ±za yardÄ±mcÄ± olacak.", options: [ { text: "Bir makinenin nasÄ±l Ã§alÄ±ÅŸtÄ±ÄŸÄ±nÄ± anlamak.", value: "R" }, { text: "Birine sorununu Ã§Ã¶zmede yardÄ±m etmek.", value: "S" } ], next: () => 'holland_test_2' },
            { id: 'holland_test_2', question: "NasÄ±l bir gÃ¶revi tercih edersin?", key: "holland_2", info: "ðŸ’¡ FarklÄ± gÃ¶revler, farklÄ± yetenekler gerektirir.", options: [ { text: "Verileri analiz edip bir problemi Ã§Ã¶zmek.", value: "I" }, { text: "YaratÄ±cÄ±lÄ±ÄŸÄ±mÄ± kullanarak Ã¶zgÃ¼n bir ÅŸey tasarlamak.", value: "A" } ], next: () => 'holland_test_3' },
            { id: 'holland_test_3', question: "Hangi rol sana daha uygun?", key: "holland_3", info: "ðŸ’¡ Liderlik mi, dÃ¼zen mi? Bu, kariyer yolunu belirlemede Ã¶nemli bir adÄ±mdÄ±r.", options: [ { text: "Bir ekibi yÃ¶netmek ve hedeflere ulaÅŸtÄ±rmak.", value: "E" }, { text: "Belirli kurallara gÃ¶re verileri dÃ¼zenlemek ve organize etmek.", value: "C" } ], next: () => null }
        ]
    };

    async function initializeApp() {
        try {
            const response = await fetch('professions.json');
            professions = await response.json();
            profileScreen.style.display = 'block';
            quizScreen.style.display = 'none';
        } catch (error) {
            console.error("Meslek veritabanÄ± yÃ¼klenemedi:", error);
            document.querySelector('.wizard-card').innerHTML = "<h3>Veriler yÃ¼klenirken bir hata oluÅŸtu. LÃ¼tfen sayfayÄ± yenileyin.</h3>";
        }
    }

    function initializeWizard() {
        quizFlow = quizData[userProfile] || quizData['lise'];
        userAnswers = {};
        showQuestionById('start');
    }

    function showQuestionById(id) {
        currentQuestionNode = quizFlow.find(q => q.id === id);
        if (!currentQuestionNode) {
            calculateResults();
            return;
        }
        resultContainer.style.display = 'none';
        questionContainer.style.display = 'block';
        nextBtn.style.display = 'block';
        questionTextEl.textContent = currentQuestionNode.question;
        optionsContainerEl.innerHTML = '';
        currentQuestionNode.options.forEach(option => {
            const label = document.createElement('label');
            label.className = 'option-label';
            label.innerHTML = `<input type="radio" name="${currentQuestionNode.key}" value="${option.value}"><span>${option.text}</span>`;
            optionsContainerEl.appendChild(label);
        });
        if (currentQuestionNode.info) {
            infoBoxEl.innerHTML = currentQuestionNode.info;
            infoBoxEl.style.display = 'block';
        } else {
            infoBoxEl.style.display = 'none';
        }
        const questionIndex = quizFlow.findIndex(q => q.id === id);
        const progress = ((questionIndex) / quizFlow.length) * 100;
        progressBar.style.width = `${progress}%`;
        nextBtn.textContent = currentQuestionNode.next(null) === null ? 'SonuÃ§larÄ± GÃ¶r âœ¨' : 'Sonraki Soru â†’';
    }

    function calculateResults() {
        let hollandAnswers = [userAnswers.holland_1, userAnswers.holland_2, userAnswers.holland_3].filter(Boolean);
        professions.forEach(profession => {
            let score = 0;
            hollandAnswers.forEach(answerCode => {
                if (profession.holland_codes && profession.holland_codes.includes(answerCode)) {
                    score += 1;
                }
            });
            profession.score = score;
        });
        const sortedProfessions = professions.sort((a, b) => b.score - a.score);
        displayResults(sortedProfessions.slice(0, 3));
    }

    function displayResults(results) {
        questionContainer.style.display = 'none';
        nextBtn.style.display = 'none';
        let resultsHTML = '<h3>VerdiÄŸin cevaplara gÃ¶re sana en uygun 3 meslek:</h3>';
        results.forEach(result => {
            const totalQuestions = Object.keys(userAnswers).length;
            const matchScore = totalQuestions > 0 ? (result.score / totalQuestions * 100).toFixed(0) : 0;
            let tagsHTML = '';
            for (const key in userAnswers) {
                const question = quizFlow.find(q => q.key === key);
                if (question && question.options) {
                    const option = question.options.find(o => o.value === userAnswers[key]);
                    if(option && result.holland_codes && result.holland_codes.includes(userAnswers[key])) { // Basit bir eÅŸleÅŸme kontrolÃ¼
                        tagsHTML += `<span class="tag">${option.text.split('(')[0].trim()}</span>`;
                    }
                }
            }
            resultsHTML += `
                <div class="result-card">
                    <h4>${result.name}</h4>
                    <div class="match-score">Sana Uyum PuanÄ±: %${matchScore} ðŸŸ¢</div>
                    <p class="description">${result.description || 'Bu meslek hakkÄ±nda yakÄ±nda daha fazla bilgi eklenecek.'}</p>
                    ${tagsHTML ? '<div class="tags-title">Neden Sana Uygun?</div><div class="tags">' + tagsHTML + '</div>' : ''}
                    <button class="primary-btn details-btn">Bu MesleÄŸi DetaylÄ± Ä°ncele â†’</button>
                </div>
            `;
        });
        resultsHTML += '<button id="restart-btn" class="secondary-btn">â€¹ Ankete BaÅŸa DÃ¶n</button>';
        resultContainer.innerHTML = resultsHTML;
        resultContainer.style.display = 'block';
        progressBar.style.width = `100%`;
        document.getElementById('restart-btn').addEventListener('click', () => {
            quizScreen.style.display = 'none';
            profileScreen.style.display = 'block';
        });
    }
    
    async function loadInfoContent(questionKey, optionValue) {
        const filePath = `content/${questionKey}/${optionValue}.html`;
        try {
            const response = await fetch(filePath);
            if (!response.ok) { throw new Error('Dosya bulunamadÄ±.'); }
            const content = await response.text();
            infoBoxEl.innerHTML = content;
            infoBoxEl.style.display = 'block';
        } catch (error) {
            infoBoxEl.innerHTML = currentQuestionNode.info || '';
        }
    }

    startQuizBtn.addEventListener('click', () => {
        userProfile = document.querySelector('input[name="user_profile"]:checked').value;
        profileScreen.style.display = 'none';
        quizScreen.style.display = 'block';
        initializeWizard();
    });

    optionsContainerEl.addEventListener('click', (e) => {
        const label = e.target.closest('.option-label');
        if (label) {
            document.querySelectorAll('.option-label').forEach(l => l.classList.remove('selected'));
            label.classList.add('selected');
            const radio = label.querySelector('input[type="radio"]');
            if (radio && currentQuestionNode.key) {
                 loadInfoContent(currentQuestionNode.key, radio.value);
            }
        }
    });

    nextBtn.addEventListener('click', () => {
        const selectedOption = optionsContainerEl.querySelector(`input[name="${currentQuestionNode.key}"]:checked`);
        if (!selectedOption) {
            alert("LÃ¼tfen bir seÃ§enek belirleyin.");
            return;
        }
        userAnswers[currentQuestionNode.key] = selectedOption.value;
        const nextQuestionId = currentQuestionNode.next(selectedOption.value);
        showQuestionById(nextQuestionId);
    });

    initializeApp();
});
